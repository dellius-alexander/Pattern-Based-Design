plugins {
    id 'java-library'
    id 'application'
}

group = 'org.example'
version = findProperty('version')

application {
    mainClass.set('com.example.SimpleFactory.Client')
    applicationDefaultJvmArgs = ['-Dgreeting.language=en']
}

compileJava {
    options.compilerArgs.addAll(['-Xlint'])
    options.deprecation = true
}

dependencies {
    // Logging dependencies
    implementation 'org.slf4j:slf4j-api:2.0.3'
    implementation 'ch.qos.logback:logback-classic:1.4.4'
    // test dependencies
    compileOnlyApi 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    // lombok annotations  dependencies is for boilerplate code generation
    implementation 'org.projectlombok:lombok:1.18.24'
    compileOnly 'org.projectlombok:lombok:1.18.24'
    annotationProcessor 'org.projectlombok:lombok:1.18.24'
    testCompileOnly 'org.projectlombok:lombok:1.18.24'
    testAnnotationProcessor 'org.projectlombok:lombok:1.18.24'
}
// run tests
test {
    useJUnitPlatform()
}

javadoc {
    source = sourceSets.main.allJava
    options.addBooleanOption('html5', true)
}

// Project and System properties
task propertyTypes(){
    doLast{
        if (project.hasProperty("args")) {
            println javaMainClass + " - Project input arguments: ["
            project.getProperty("args").each { arg ->
                println arg
            }
            println "]"
        }

        if (System.getProperty("args")) {
            println javaMainClass +" - System input arguments: ["
            System.getProperty("args").each { arg ->
                println arg
            }
            println "]"
        }
    }
}
// Using and creating an Executable Jar
jar {
    // Exclude file from jar:
    exclude 'META-INF/*.SF', 'META-INF/*.DSA', 'META-INF/*.RSA', 'META-INF/*.MF'
    //noinspection GroovyAssignabilityCheck
    manifest {
        attributes  'Main-Class': 'com.example.SimpleFactory.Client',
                    'Class-Path': configurations.runtimeClasspath.files.collect { it.name }.join(' ')
    }
}
// run the app and pass CLi arguments: method 1
task runApp(type: JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass.set('com.example.SimpleFactory.Client')
    // arguments to pass to the application
    args 'Mango', 'Peach', 'Fuji Apple'

}

build.dependsOn javadoc
build.dependsOn propertyTypes
runApp.dependsOn jar
